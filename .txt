// TO-Do

User Management
├─ login ✓
├─ sign up ✓
├─ forget password ✓
├─ change password ✓
├─ refresh token - get new access token - extend session ✓
├─ email sending (optional) ✓
├─ profile update ✓
├─ create a users table : id, first_name, last_name, email, password, profile (null), created_by, updated_by, created_at, updated_at ✓

Service Management
├─ create a database table "services". columns: id, name, description, created_by, updated_by created_at, updated_at ✓
├─ insert some services ✓
├─ create a route to get all the services by super admin ✓
├─ route, controller, model ✓
├─ create a route to get a single service by id ✓

Permission Management
├─ create a route to create permissions
├─ payload (permission_name, array of service ids)
├─ validation
├─ create permission in controller
├─ create permissions model. columns: id, name, created_by, updated_by, created_at, updated_at. create another model named "permission_services". columns: id, permission_id, service_id, created_by (userId), updated_by, created_at, updated_at
├─ get all permissions route
├─ get a single permission route
├─ update permission route
├─ delete permission route
├─ sorting
├─ pagination
├─ filtering




project/
├── node_modules/
├── public/
│   ├── css/
│   ├── img/
│   └── js/
├── routes/
├── views/
├── package.json
└── server.js

// Our 

project/
├── node_modules/
├── src/
│   ├── config/
│   │   ├── assets/
│   │   │   └── default.js
│   │   ├── lib/
│   │   │   ├── app.js
│   │   │   ├── express.js
│   │   │   └── sequelize.js
│   │   └── index.js
│   └── modules/
│       ├── core/
│       │   ├── middlewares/
│       │   │   └── validate.js
│       ├── user/
│       │    ├── service/
│       │    │   └── user.service.js
│       │    │
│       │    ├── user.authenticate.js
│       │    ├── user.controller.js
│       │    ├── user.model.js
│       │    ├── user.routes.js
│       │    ├── user.schema.js
│       │    └── user.strategy.js
│       └── service/
│       │    ├── service.controller.js
│       │    ├── service.model.js
│       │    ├── service.routes.js
│   
├── .env
├── package.json
├── seeder.js
└── server.js

// GITHUB Clear already tracked history - when you uploaded without .gitignore then add gitignore later
git rm --cached .env
git commit -m "stop tracking node modules"
git push origin <branch name- main or master> --force

git rm -rf --cached node_modules
git commit -m "stop tracking node modules"
git push origin main --force

// login
- access an existing user and add a token with a session
- jwt will convert whole data into single token using a TOKEN_SECRET
- database shouldn't store the token so login will include the token with response & send to the client (browser) as cookie using cookie-parser

// updateUser
- logged in user will send a update data request
    // authenticate
        - authenticate will check and verify the token stored in client cookie using TOKEN_SECRET
        - if verified authenticate will decode the token into data and add user to the request (req.data = decode)
        - then go for next middlewares

// 


Sure, here's an example of how you can create a mechanism to get a new access token using a refresh token in Node.js:

Create a route to handle the refresh token request:


app.post('/refresh-token', async (req, res) => {
  const { refreshToken } = req.body;

  // Check if refresh token exists
  const tokenExists = await RefreshToken.findOne({ where: { token: refreshToken } });
  if (!tokenExists) {
    return res.status(401).json({ message: 'Invalid refresh token' });
  }

  try {
    // Verify the refresh token
    const decoded = jwt.verify(refreshToken, process.env.REFRESH_TOKEN_SECRET);

    // Check if the user exists
    const user = await User.findOne({ where: { id: decoded.id } });
    if (!user) {
      return res.status(401).json({ message: 'Invalid refresh token' });
    }

    // Create a new access token
    const accessToken = jwt.sign({ id: user.id }, process.env.ACCESS_TOKEN_SECRET, { expiresIn: '15m' });

    // Send the new access token to the client
    res.json({ accessToken });
  } catch (err) {
    return res.status(401).json({ message: 'Invalid refresh token' });
  }
});
Add a new model for storing refresh tokens:


const { Sequelize, DataTypes } = require('sequelize');
const sequelize = new Sequelize(process.env.DB_NAME, process.env.DB_USER, process.env.DB_PASS, {
  dialect: process.env.DB_DIALECT,
  host: process.env.DB_HOST,
});

const RefreshToken = sequelize.define('RefreshToken', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
  },
  token: {
    type: DataTypes.STRING,
    allowNull: false,
  },
});

module.exports = RefreshToken;
When a user logs in, create a new refresh token and store it in the database:


app.post('/login', async (req, res) => {
  const { email, password } = req.body;

  // Check if the user exists
  const user = await User.findOne({ where: { email } });
  if (!user) {
    return res.status(401).json({ message: 'Invalid email or password' });
  }

  // Check if the password is correct
  const isPasswordCorrect = await bcrypt.compare(password, user.password);
  if (!isPasswordCorrect) {
    return res.status(401).json({ message: 'Invalid email or password' });
  }

  // Create a new access token
  const accessToken = jwt.sign({ id: user.id }, process.env.ACCESS_TOKEN_SECRET, { expiresIn: '15m' });

  // Create a new refresh token
  const refreshToken = jwt.sign({ id: user.id }, process.env.REFRESH_TOKEN_SECRET, { expiresIn: '7d' });
  await RefreshToken.create({ token: refreshToken });

  // Send the access token and refresh token to the client
  res.json({ accessToken, refreshToken });
});
When a user logs out, delete the refresh token from the database:


app.post('/logout', async (req, res) => {
  const { refreshToken } = req.body;

  // Delete the refresh token from the database
  await RefreshToken.destroy({ where: { token: refreshToken } });

  res.sendStatus(204);
});

Note: This is just an example implementation, and you may need to modify it to fit your specific needs.
